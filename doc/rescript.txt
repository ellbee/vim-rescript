rescript.txt 	VIM plugin for the ReScript programming language

 ____      ____            _       _    ~
|  _ \ ___/ ___|  ___ _ __(_)_ __ | |_  ~
| |_) / _ \___ \ / __| '__| | '_ \| __| ~
|  _ <  __/___) | (__| |  | | |_) | |_  ~
|_| \_\___|____/ \___|_|  |_| .__/ \__| ~
                            |_|         ~


Main Website: <https://rescript-lang.org/>
Plugin Website: <https://github.com/rescript-lang/vim-rescript>

===============================================================================
CONTENTS                                                             *rescript*

	   Intro ......................... |rescript-introduction|
	   Config ........................ |rescript-config|
           omnicomplete................... |rescript-omnicomplete|
           COC Config..................... |rescript-coc|
	   Variables ..................... |rescript-variables|
	   Commands ...................... |rescript-commands|


===============================================================================
INTRODUCTION                                            *rescript-introduction*

This plugin provides important features to work on ReScript projects, such as:

- Syntax highlighting
- Code formatting
- Type hints
- Goto Definition
- Autocompletion (via omnicomplete)

Compatibility:
This plugin is guaranteed to work with `bs-platform@8.3` and above and comes
with all the required executables.

Please make sure to install your project dependencies. The plugin will look
for the nearest node_modules folder to get access to the ReScript toolchain.

===============================================================================
CONFIG                                                      *rescript-config*

By default, this plugin will not create any keymappings, nor does it mess
around with any other vim configurations, so you'd need to add some basic
configuration to your |vimrc|to get access to the full set of features.

Here is a default configuration to get you started
  autocmd FileType rescript nnoremap <silent> <buffer> <localleader>r :RescriptFormat<CR>
  autocmd FileType rescript nnoremap <silent> <buffer> <localleader>t :RescriptTypeHint<CR>
  autocmd FileType rescript nnoremap <silent> <buffer> <localleader>b :RescriptBuild<CR>
  autocmd FileType rescript nnoremap <silent> <buffer> gd :RescriptJumpToDefinition<CR>

Note that <buffer> allows us to use different commands with the same keybindings depending
on the filetype. This is useful if to override your e.g. ALE bindings while working on
ReScript projects.

===============================================================================
OMNICOMPLETE					   	*rescript-omnicomplete*

This plugin supports auto-completion with Vim's builtin |omnifunc|, that is
triggered with `C-x C-o` in insert mode to look for autocomplete candidates.

While omnicomplete's dialog is open, use `C-n` / `C-p` to navigate to the next
/ previous item

Put the following settings in your vimrc to activate omnicompletion:
  " Hooking up the ReScript autocomplete function
  set omnifunc=rescript#Complete

  " When preview is enabled, omnicomplete will display additional
  " information for a selected item
  set completeopt+=preview

===============================================================================
COC-CONFIG						    *rescript-coc*

In case you want to use ReScript with |coc-nvim|, open your config file with
|:CocConfig| and add following settings:

"languageserver": {
  "rescript": {
    "enable": true,
    "module": "~/.config/nvim/plugged/vim-rescript/rescript-vscode-1.0.0/extension/server/out/server.js",
    "args": ["--node-ipc"],
    "filetypes": ["rescript"],
    "rootPatterns": ["bsconfig.json"]
  }
}

The config above assumes that you are using vim-plug. Adapt your `module` path
according to the install location of your vim-rescript plugin.

Save the configuration, run |:CocRestart| and open a (built) ReScript project
and check your code for type-hints.

===============================================================================
VARIABLES                                                  *rescript-variables*

g:rescript_editor_support_exe		string       *g:rescript_editor_support_exe*

    Path to ReScript's editor-support executable. This is mainly used for
    plugin development purposes. Don't abuse this config.

===============================================================================
COMMANDS                                                    *rescript-commands*

*:RescriptFormat*
    Formats the current buffer. In case of an error, it will open a quickfix
    window with all the syntax errors. See |:cfirst| |:cnext| |:cprev| for
    quick error navigation

*:RescriptUpgradeFromReason*
    Reads from the current .re / .res file, and creates an equivalent .res /
    .resi file in the same path. Make sure to delete the original .re file
    after writing your new .res file, otherwise the compiler will not compile.

*:RescriptBuild*
    Builds your current project with g:rescript_build_exe

*:RescriptTypeHint*
    Uses the g:rescript_editor_support_exe executable to extract
    type information of the current file and displays the right type hint for
    the current cursor position

*:RescriptJumpToDefinition*
    Uses the g:rescript_editor_support_exe executable to jump to the
    original definition of the entity on the current position

*:RescriptInfo*
    Lists current plugin state (detected config, executable paths, etc)

vim:tw=78:ts=8:noet:ft=help:norl:
